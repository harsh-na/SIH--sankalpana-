/*! firebase-admin v9.12.0 */
/*!
 * Copyright 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { app, FirebaseArrayIndexError } from '../firebase-namespace-api';
/**
 * Gets the {@link auth.Auth `Auth`} service for the default app or a
 * given app.
 *
 * `admin.auth()` can be called with no arguments to access the default app's
 * {@link auth.Auth `Auth`} service or as `admin.auth(app)` to access the
 * {@link auth.Auth `Auth`} service associated with a specific app.
 *
 * @example
 * ```javascript
 * // Get the Auth service for the default app
 * var defaultAuth = admin.auth();
 * ```
 *
 * @example
 * ```javascript
 * // Get the Auth service for a given app
 * var otherAuth = admin.auth(otherApp);
 * ```
 *
 */
export declare function auth(app?: app.App): auth.Auth;
export declare namespace auth {
    /**
     * Interface representing a user's metadata.
     */
    interface UserMetadata {
        /**
         * The date the user last signed in, formatted as a UTC string.
         */
        lastSignInTime: string;
        /**
         * The date the user was created, formatted as a UTC string.
         */
        creationTime: string;
        /**
         * The time at which the user was last active (ID token refreshed),
         * formatted as a UTC Date string (eg 'Sat, 03 Feb 2001 04:05:06 GMT').
         * Returns null if the user was never active.
         */
        lastRefreshTime?: string | null;
        /**
         * @return A JSON-serializable representation of this object.
         */
        toJSON(): object;
    }
    /**
     * Interface representing a user's info from a third-party identity provider
     * such as Google or Facebook.
     */
    interface UserInfo {
        /**
         * The user identifier for the linked provider.
         */
        uid: string;
        /**
         * The display name for the linked provider.
         */
        displayName: string;
        /**
         * The email for the linked provider.
         */
        email: string;
        /**
         * The phone number for the linked provider.
         */
        phoneNumber: string;
        /**
         * The photo URL for the linked provider.
         */
        photoURL: string;
        /**
         * The linked provider ID (for example, "google.com" for the Google provider).
         */
        providerId: string;
        /**
         * @return A JSON-serializable representation of this object.
         */
        toJSON(): object;
    }
    /**
     * Interface representing the common properties of a user-enrolled second factor.
     */
    interface MultiFactorInfo {
        /**
         * The ID of the enrolled second factor. This ID is unique to the user.
         */
        uid: string;
        /**
         * The optional display name of the enrolled second factor.
         */
        displayName?: string;
        /**
         * The optional date the second factor was enrolled, formatted as a UTC string.
         */
        enrollmentTime?: string;
        /**
         * The type identifier of the second factor. For SMS second factors, this is `phone`.
         */
        factorId: string;
        /**
         * @return A JSON-serializable representation of this object.
         */
        toJSON(): object;
    }
    /**
     * Interface representing a phone specific user-enrolled second factor.
     */
    interface PhoneMultiFactorInfo extends MultiFactorInfo {
        /**
         * The phone number associated with a phone second factor.
         */
        phoneNumber: string;
    }
    /**
     * Represents a user identity provider that can be associated with a Firebase user.
     */
    interface UserProvider {
        /**
         * The user identifier for the linked provider.
         */
        uid?: string;
        /**
         * The display name for the linked provider.
         */
        displayName?: string;
        /**
         * The email for the linked provider.
         */
        email?: string;
        /**
         * The phone number for the linked provider.
         */
        phoneNumber?: string;
        /**
         * The photo URL for the linked provider.
         */
        photoURL?: string;
        /**
         * The linked provider ID (for example, "google.com" for the Google provider).
         */
        providerId?: string;
    }
    /**
     * Interface representing a user.
     */
    interface UserRecord {
        /**
         * The user's `uid`.
         */
        uid: string;
        /**
         * The user's primary email, if set.
         */
        email?: string;
        /**
         * Whether or not the user's primary email is verified.
         */
        emailVerified: boolean;
        /**
         * The user's display name.
         */
        displayName?: string;
        /**
         * The user's primary phone number, if set.
         */
        phoneNumber?: string;
        /**
         * The user's photo URL.
         */
        photoURL?: string;
        /**
         * Whether or not the user is disabled: `true` for disabled; `false` for
         * enabled.
         */
        disabled: boolean;
        /**
         * Additional metadata about the user.
         */
        metadata: UserMetadata;
        /**
         * An array of providers (for example, Google, Facebook) linked to the user.
         */
        providerData: UserInfo[];
        /**
         * The user's hashed password (base64-encoded), only if Firebase Auth hashing
         * algorithm (SCRYPT) is used. If a different hashing algorithm had been used
         * when uploading this user, as is typical when migrating from another Auth
         * system, this will be an empty string. If no password is set, this is
         * null. This is only available when the user is obtained from
         * {@link auth.Auth.listUsers `listUsers()`}.
         *
         */
        passwordHash?: string;
        /**
         * The user's password salt (base64-encoded), only if Firebase Auth hashing
         * algorithm (SCRYPT) is used. If a different hashing algorithm had been used to
         * upload this user, typical when migrating from another Auth system, this will
         * be an empty string. If no password is set, this is null. This is only
         * available when the user is obtained from
         * {@link auth.Auth.listUsers `listUsers()`}.
         *
         */
        passwordSalt?: string;
        /**
         * The user's custom claims object if available, typically used to define
         * user roles and propagated to an authenticated user's ID token.
         * This is set via
         * {@link auth.Auth.setCustomUserClaims `setCustomUserClaims()`}
         */
        customClaims?: {
            [key: string]: any;
        };
        /**
         * The date the user's tokens are valid after, formatted as a UTC string.
         * This is updated every time the user's refresh token are revoked either
         * from the {@link auth.Auth.revokeRefreshTokens `revokeRefreshTokens()`}
         * API or from the Firebase Auth backend 